{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\nmax_fee = Int(1500)\nasset_id_A = Int(333333)\nasset_id_B = Int(444444)\namount_A = Int(7000)\namount_B = Int(4000)\nreceiver_A = Addr(\"2BXH2D2BLCVH4V5HCSER72JCIHUOTIZIE6HFWXYKDSYBCTWCWTRJCVJSVE\")\nreceiver_B = Addr(\"F3HMDQ4KPRKQ3CG6PS2Q6BLJYCJXWUHP6YYC5XT3TWSDHOHXXY76ITL7QM\")\nstart_block = Int(6000)  \nend_block = Int(12000) \n\ndef custom_asset_transfers():\n  \n    group_size_check = Global.group_size() == Int(3)\n\n   \n    block_time_check = And(\n        Global.latest_timestamp() >= start_block,\n        Global.latest_timestamp() <= end_block,\n    )\n\n   \n    txn_0 = And(\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,\n        Gtxn[0].fee() <= max_fee,\n        Gtxn[0].xfer_asset() == asset_id_A,\n        Gtxn[0].asset_receiver() == receiver_A,\n        Gtxn[0].asset_amount() == amount_A,\n        Gtxn[0].note() == Bytes(\"AssetTransferA\"),  \n        Gtxn[0].asset_close_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n    )\n\n   \n    txn_1 = And(\n        Gtxn[1].type_enum() == TxnType.AssetTransfer,\n        Gtxn[1].fee() <= max_fee,\n        Gtxn[1].xfer_asset() == asset_id_B,\n        Gtxn[1].asset_receiver() == receiver_B,\n        If(\n            Global.latest_timestamp() % Int(2) == Int(0),\n            Gtxn[1].asset_amount() == amount_B,\n            Gtxn[1].asset_amount() == amount_B + Int(2000), \n        ),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n    )\n\n   \n    txn_2 = And(\n        Gtxn[2].type_enum() == TxnType.Payment,\n        Gtxn[2].fee() <= max_fee,\n        Gtxn[2].amount() == Int(1000000),\n        Gtxn[2].receiver() == Addr(\"CAIXMEEV5IY3H4INFPLRQ35I4ZO3ICAD6WGLDDATXCOVJYKST5YHJXRHQE\"),\n        Gtxn[2].close_remainder_to() == Global.zero_address(),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n    )\n\n  \n    program = And(\n        group_size_check,\n        block_time_check,\n        txn_0,\n        txn_1,\n        txn_2,\n    )\n\n    return program\n\ndef clear_program():\n    return Approve()\nif __name__ == \"__main__\":\n    print(compileTeal(custom_asset_transfers(), mode=Mode.Signature, version=5))"}
