{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\ndef varied_asset_transfer_contract(expected_asset_id_1: Int, expected_asset_receiver_1: Expr,\n                                   expected_asset_id_2: Int, expected_asset_receiver_2: Expr,\n                                   expected_payment_receiver: Expr):\n\n    check_group_size = Global.group_size() == Int(3)\n\n    asset_transfer_check_1 = And(\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,\n        Gtxn[0].fee() <= Int(2500),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n        Gtxn[0].xfer_asset() == expected_asset_id_1,  # Check the transferred asset\n        Gtxn[0].asset_amount() >= Int(15),\n        Gtxn[0].asset_receiver() == expected_asset_receiver_1, # Check the receiver\n    )\n\n\n    asset_transfer_check_2 = And(\n        Gtxn[1].type_enum() == TxnType.AssetTransfer,\n        Gtxn[1].fee() <= Int(2500),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n        Gtxn[1].xfer_asset() == expected_asset_id_2,  # Check the transferred asset\n        Gtxn[1].asset_amount() >= Int(15),\n        Gtxn[1].asset_receiver() == expected_asset_receiver_2, # Check the receiver\n    )\n\n\n    payment_check = And(\n        Gtxn[2].type_enum() == TxnType.Payment,\n        Gtxn[2].fee() <= Int(1500),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n        Gtxn[2].close_remainder_to() == Global.zero_address(),\n        Gtxn[2].receiver() == expected_payment_receiver,  # Check the receiver\n    )\n\n\n    program_logic = And(\n        check_group_size,\n        asset_transfer_check_1,\n        asset_transfer_check_2,\n        payment_check,\n    )\n\n    return program_logic\n\nif __name__ == \"__main__\":\n    print(compileTeal(varied_asset_transfer_contract(), mode=Mode.Signature, version=6))"}
