{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\ndef real_world_application():\n    fee_limit = Int(1000)\n\n    payment_receiver_0 = Addr(\"RL6VDLXCN5G7N2GRTS7YLVDSFT4PVBBUOVTVS7T26OQ5MLXYQKRMI5ADXY\")  # txn1\n    asset_receiver_1 = Addr(\"NJY27OQ2ZXK6OWBN44LE4K43TA2AV3DPILPYTHAJAMKIVZDWTEJKZJKO4A\")    # txn2\n    payment_receiver_2 = Addr(\"L42DW7MSHP4PMIAZSDAXYTZVHTE756KGXCJYGFKCET5XHIAWLBYYNSMZQU\")  # txn3\n    asset_receiver_3 = Addr(\"NFFMZJC6H52JLEAITTJ7OIML3XCJFKIRXYRJLO4WLWIJZB7N6CTWESRAZU.\")    # txn4\n\n    txn1 = Seq([\n        Assert(Txn.fee() <= fee_limit),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.type_enum() == TxnType.Payment),\n        Assert(Txn.receiver() == payment_receiver_0),\n        Return(Int(1))\n    ])\n\n    txn2 = Seq([\n        Assert(And(\n            Txn.fee() <= fee_limit,\n            Txn.rekey_to() == Global.zero_address(),\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.type_enum() == TxnType.AssetTransfer,\n            Txn.asset_receiver() == asset_receiver_1\n        )),\n        Return(Int(1))\n    ])\n\n    txn3 = Seq([\n        Assert(And(\n            Txn.fee() <= fee_limit,\n            Txn.rekey_to() == Global.zero_address(),\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.type_enum() == TxnType.Payment,\n            Txn.receiver() == payment_receiver_2\n        )),\n        Return(Int(1))\n    ])\n\n    txn4 = Seq([\n        Assert(And(\n            Txn.fee() <= fee_limit,\n            Txn.rekey_to() == Global.zero_address(),\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.type_enum() == TxnType.AssetTransfer,\n            Txn.asset_receiver() == asset_receiver_3\n        )),\n        Return(Int(1))\n    ])\n\n    program = Cond(\n        [Txn.group_index() == Int(0), txn1],\n        [Txn.group_index() == Int(1), txn2],\n        [Txn.group_index() == Int(2), txn3],\n        [Txn.group_index() == Int(3), txn4]\n    )\n\n    return program\n"}
