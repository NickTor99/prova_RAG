{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\ntmpl_fee = Int(1000)\ntmpl_rcv1 = Addr(\"6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY\")\ntmpl_rcv2 = Addr(\"7Z5PWO2C6LFNQFGHWKSK5H47IQP5OJW2M3HA2QPXTY3WTNP5NU2MHBW27M\")\ntmpl_own = Addr(\"5MK5NGBRT5RL6IGUSYDIX5P7TNNZKRVXKT6FGVI6UVK6IZAWTYQGE4RZIQ\")\ntmpl_ratn = Int(1)\ntmpl_ratd = Int(3)\ntmpl_min_pay = Int(1000)\ntmpl_timeout = Int(3000)\n\n\ndef split(\n    tmpl_fee=tmpl_fee,\n    tmpl_rcv1=tmpl_rcv1,\n    tmpl_rcv2=tmpl_rcv2,\n    tmpl_own=tmpl_own,\n    tmpl_ratn=tmpl_ratn,\n    tmpl_ratd=tmpl_ratd,\n    tmpl_min_pay=tmpl_min_pay,\n    tmpl_timeout=tmpl_timeout,\n):\n    split_core = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.fee() < tmpl_fee,\n        Txn.rekey_to() == Global.zero_address(),\n    )\n\n    split_transfer = And(\n        Gtxn[0].sender() == Gtxn[1].sender(),\n        Txn.close_remainder_to() == Global.zero_address(),\n        Gtxn[0].receiver() == tmpl_rcv1,\n        Gtxn[1].receiver() == tmpl_rcv2,\n        Gtxn[0].amount()\n        == ((Gtxn[0].amount() + Gtxn[1].amount()) * tmpl_ratn) \/ tmpl_ratd,\n        Gtxn[0].amount() == tmpl_min_pay,\n    )\n\n    split_close = And(\n        Txn.close_remainder_to() == tmpl_own,\n        Txn.receiver() == Global.zero_address(),\n        Txn.amount() == Int(0),\n        Txn.first_valid() > tmpl_timeout,\n    )\n\n    split_program = And(\n        split_core, If(Global.group_size() == Int(2), split_transfer, split_close)\n    )\n\n    return split_program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(split(), mode=Mode.Signature, version=2))"}
