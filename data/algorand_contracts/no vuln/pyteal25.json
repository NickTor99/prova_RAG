{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\ndef simple_access_control_contract():\n    admin_key = Bytes(\"Admin\")\n    access_count_key = Bytes(\"AccessCount\")\n\n    initialize_application = Seq([\n        App.globalPut(admin_key, Txn.sender()),\n        App.globalPut(access_count_key, Int(0)),\n        Approve()\n    ])\n\n    grant_access = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(1),\n                Txn.sender() != App.globalGet(admin_key)  \n            )\n        ),\n        App.globalPut(access_count_key, App.globalGet(access_count_key) + Int(1)),\n        Approve()\n    ])\n\n   \n    update_admin = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(2),  \n                Txn.sender() == App.globalGet(admin_key)  \n            )\n        ),\n        App.globalPut(admin_key, Txn.application_args[1]),\n        Approve()\n    ])\n\n    \n    delete_application = Seq([\n        Assert(Txn.sender() == App.globalGet(admin_key)),\n        Approve()\n    ])\n\n    \n    program = Cond(\n        [Txn.application_id() == Int(0), initialize_application],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"grant_access\"), grant_access],\n            [Txn.application_args[0] == Bytes(\"update_admin\"), update_admin]\n        )],\n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_application]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    compiled = compileTeal(simple_access_control_contract(), mode=Mode.Application, version=5)\n    print(compiled)\n"}
