{"vulnerability":"transaction_fee","smart_contract":"from pyteal import *\n\n\ndef advanced_transaction_verification():\n    primary_recipient = Addr(\"UM7JZKBPRQQGAKD3PH2MTWOQRGYDYFS7NZT26V62G6XB5TKCPFG4Q3KY2A\")\n    secondary_recipient = Addr(\"UYVXIX2I32BZKHMI2HZZAAEEYNFTKZXIFMBXTZ7GRO6QTRCP2RUVAZ5SX4\")\n    tertiary_recipient = Addr(\"Y4VITGDJ2GY6SCUDQ4K7KLZOJWU7U6P7M5EZRQNVYWPAKOIJRUTQMBFONA\")\n    max_amount = Int(500000)\n    expiration_time = Int(1650000000)\n\n    group_check = Global.group_size() == Int(4)\n\n    txn1_conditions = And(\n        Gtxn[0].type_enum() == TxnType.Payment,\n        Gtxn[0].receiver() == primary_recipient,\n        Gtxn[0].amount() == max_amount \/ Int(2),\n        Gtxn[0].close_remainder_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n        Gtxn[0].fee() <= Int(1000),\n    )\n\n    txn2_conditions = And(\n        Gtxn[1].type_enum() == TxnType.Payment,\n        Gtxn[1].receiver() == secondary_recipient,\n        Gtxn[1].amount() <= max_amount \/ Int(3),\n        Gtxn[1].close_remainder_to() == Global.zero_address(),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n        Global.latest_timestamp() < expiration_time,\n        Gtxn[1].fee() <= Int(1000),\n    )\n\n    txn3_conditions = And(\n        Gtxn[2].type_enum() == TxnType.AssetTransfer,\n        Gtxn[2].asset_receiver() == tertiary_recipient,\n        Gtxn[2].asset_amount() == Int(1),\n        Gtxn[2].fee() <= Int(1000),\n        Gtxn[2].asset_close_to() == Global.zero_address(),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n    )\n\n    txn4_conditions = And(\n        Gtxn[3].type_enum() == TxnType.Payment,\n        Gtxn[3].receiver() == primary_recipient,\n        Gtxn[3].amount() == max_amount \/ Int(4),\n        Gtxn[3].close_remainder_to() == Global.zero_address(),\n        Gtxn[3].rekey_to() == Global.zero_address(),\n    )\n\n    exclusive_txn_check = Or(txn1_conditions, txn2_conditions, txn3_conditions)\n\n    program_logic = And(group_check, exclusive_txn_check, txn4_conditions)\n\n    return program_logic\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(advanced_transaction_verification(), mode=Mode.Signature, version=5))\n"}
