{"vulnerability":"Unchecked_Payment_Receiver","smart_contract":"from pyteal import *\n\ndef pension_payment_contract():\n    creator_key = Bytes(\"Creator\")\n    pension_fund = Bytes(\"Fund\")\n\n    handle_creation = Seq([\n        App.globalPut(creator_key, Txn.sender()),\n        App.globalPut(pension_fund, Int(0)),\n        Return(Int(1))\n    ])\n\n    handle_fund = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[0].type_enum() == TxnType.Payment),\n        App.globalPut(pension_fund, App.globalGet(pension_fund) + Gtxn[0].amount()),\n        Approve()\n    ])\n\n    handle_withdraw = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[1].type_enum() == TxnType.Payment),\n        Assert(App.globalGet(pension_fund) >= Gtxn[1].amount()),\n        App.globalPut(pension_fund, App.globalGet(pension_fund) - Gtxn[1].amount()),\n        InnerTxnBuilder.Begin(),\n        InnerTxnBuilder.SetField(TxnField.type_enum, TxnType.Payment),\n        InnerTxnBuilder.SetField(TxnField.receiver, Gtxn[1].accounts[1]),\n        InnerTxnBuilder.SetField(TxnField.amount, Gtxn[1].amount()),\n        InnerTxnBuilder.Submit(),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), handle_creation],\n        [Txn.on_completion() == OnComplete.NoOp, handle_fund],\n        [Txn.on_completion() == OnComplete.ClearState, handle_withdraw]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(pension_payment_contract(), mode=Mode.Application, version=5))"}
