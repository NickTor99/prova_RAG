{"vulnerability":"arbitrary_delete","smart_contract":"from pyteal import *\n\ndef approval_program():\n\n    increment_counter = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(1),\n                Txn.sender() != Global.creator_address()  \n            )\n        ),\n        App.globalPut(Bytes(\"counter\"), App.globalGet(Bytes(\"counter\")) + Int(1)),\n        Approve()\n    ])\n\n    reset_counter = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(1),\n                Txn.sender() == Global.creator_address() \n            )\n        ),\n        App.globalPut(Bytes(\"counter\"), Int(0)),\n        Approve()\n    ])\n\n    get_counter = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        Return(App.globalGet(Bytes(\"counter\")) >= Int(0))\n    ])\n\n    delete_contract = Approve()\n\n    program = Cond(\n        [Txn.application_id() == Int(0), Seq([\n            App.globalPut(Bytes(\"counter\"), Int(0)),  \n            Approve()\n        ])],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"increment\"), increment_counter],\n            [Txn.application_args[0] == Bytes(\"get_counter\"), get_counter],\n            [Txn.application_args[0] == Bytes(\"reset\"), reset_counter]\n        )],\n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_contract]\n    )\n\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(approval_program(), mode=Mode.Application, version=5))"}
