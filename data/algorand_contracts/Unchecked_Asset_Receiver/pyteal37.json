{"vulnerability":"Unchecked_Asset_Receiver","smart_contract":"from pyteal import *\n\ndef contract():\n    min_transfer = Int(100)\n    receiver_key = Bytes(\"receiver\")\n    creator_key = Bytes(\"Creator\")\n\n    handle_creation = Seq([\n        App.globalPut(creator_key, Txn.sender()),\n        Return(Int(1))\n    ])\n\n    handle_optin = Return(Int(1))\n\n    handle_closeout = Return(Int(1))\n\n    handle_updateapp = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    handle_deleteapp = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    handle_transfer = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(1),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[1].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[1].assets[0],\n                Gtxn[0].asset_amount() >= min_transfer\n            )\n        ),\n        InnerTxnBuilder.Begin(),\n        InnerTxnBuilder.SetFields({\n            TxnField.type_enum: TxnType.AssetTransfer,\n            TxnField.asset_receiver: Txn.accounts[1],\n            TxnField.asset_amount: Gtxn[0].asset_amount(),\n            TxnField.xfer_asset: Gtxn[0].xfer_asset()\n        }),\n        InnerTxnBuilder.Submit(),\n        App.globalPut(Concat(receiver_key, Txn.accounts[1]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    handle_check_transfers = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        Return(App.globalGet(Concat(receiver_key, Txn.accounts[1])) > Int(0))\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), handle_creation],\n        [Txn.on_completion() == OnComplete.OptIn, handle_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, handle_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, handle_updateapp],\n        [Txn.on_completion() == OnComplete.DeleteApplication, handle_deleteapp],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"transfer\"), handle_transfer],\n            [Txn.application_args[0] == Bytes(\"check_transfer\"), handle_check_transfers]\n        )]\n    )\n\n    return program\n\ndef clear_state_program():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(contract(), mode=Mode.Application, version=5))"}
