{"vulnerability":"arbitrary_delete","smart_contract":"from pyteal import *\n\ndef approval_program():\n    is_delete_application = And(\n        Txn.on_completion() == OnComplete.DeleteApplication,\n        Txn.application_id() != Int(0)\n    )\n\n    is_opt_in = Txn.on_completion() == OnComplete.OptIn\n\n    program = Seq([\n        Assert(Global.latest_timestamp() > Int(0)),\n\n        Cond(\n            [is_delete_application, Seq([\n                Log(Bytes(\"Delete Application\")),\n                Return(Int(1))\n            ])],\n            [is_opt_in, Seq([\n                Log(Bytes(\"Opt-In Transaction\")),\n                Return(Int(1))\n            ])]\n        ),\n\n        Log(Bytes(\"Contratto_approvato\")),\n\n        If(Txn.amount() > Int(1000),\n           Log(Bytes(\"Transazione_superiore_1000_microalgo\")),\n           Log(Bytes(\"Transazione_inferiore_1000_microalgo\"))\n           ),\n\n        If(\n            Txn.rekey_to() != Global.zero_address(),\n            Seq([\n                Log(Bytes(\"Rekey Transaction Detected\")),\n                Return(Int(0))\n            ])\n        ),\n\n        Return(Int(1))\n    ])\n    return program\n\ndef clear_program():\n    program = Seq([\n        Log(Bytes(\"Clear eseguito\")),\n        Return(Int(1))\n    ])\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(approval_program(), mode=Mode.Application, version=5))\n"}
{"vulnerability":"arbitrary_delete","smart_contract":"from pyteal import *\n\ndef approval_program():\n    is_delete_application = And(\n        Txn.on_completion() == OnComplete.DeleteApplication,\n        Txn.application_id() != Int(0)\n    )\n\n    is_opt_in = Txn.on_completion() == OnComplete.OptIn\n\n    is_update_application = Txn.on_completion() == OnComplete.UpdateApplication\n\n    is_close_out = Txn.on_completion() == OnComplete.CloseOut\n\n    program = Seq([\n        Assert(Global.latest_timestamp() > Int(0)),\n\n        Cond(\n            [is_delete_application, Seq([\n                Log(Bytes(\"Delete Application\")),\n                Return(Int(1))\n            ])],\n            [is_opt_in, Seq([\n                Log(Bytes(\"Opt-In Transaction\")),\n                Return(Int(1))\n            ])],\n            [is_update_application, Seq([\n                Assert(Txn.sender()==Global.zero_address()),\n                Log(Bytes(\"Update Application\")),\n                Return(Int(1))\n            ])],\n            [is_close_out, Seq([\n                Log(Bytes(\"Close Out\")),\n                Return(Int(1))\n            ])]\n        ),\n\n        Log(Bytes(\"Contratto_approvato\")),\n\n        If(Txn.amount() > Int(1000),\n           Log(Bytes(\"Transazione_superiore_1000_microalgo\")),\n           Log(Bytes(\"Transazione_inferiore_1000_microalgo\"))\n           ),\n\n        If(\n            Txn.rekey_to() != Global.zero_address(),\n            Seq([\n                Log(Bytes(\"Rekey Transaction Detected\")),\n                Return(Int(0))\n            ])\n        ),\n\n        If(\n            Txn.application_args.length() > Int(0),\n            Seq([\n                Log(Bytes(\"Transaction Arguments Provided\")),\n                App.globalPut(Bytes(\"latest_arg\"), Txn.application_args[0])\n            ])\n        ),\n\n        If(\n            Txn.type_enum() == TxnType.Payment,\n            Seq([\n                Log(Bytes(\"Payment Transaction Detected\")),\n                Assert(Txn.amount() > Int(100)),\n                App.globalPut(Bytes(\"last_payment\"), Txn.amount())\n            ])\n        ),\n\n        Return(Int(1))\n    ])\n    return program\n\ndef clear_program():\n    program = Seq([\n        Log(Bytes(\"Clear eseguito\")),\n        Return(Int(1))\n    ])\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(approval_program(), mode=Mode.Application, version=5))\n"}
{"vulnerability":"arbitrary_delete","smart_contract":"from pyteal import *\n\ndef approval_program():\n\n    increment_counter = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(1),\n                Txn.sender() != Global.creator_address()  \n            )\n        ),\n        App.globalPut(Bytes(\"counter\"), App.globalGet(Bytes(\"counter\")) + Int(1)),\n        Approve()\n    ])\n\n    reset_counter = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(1),\n                Txn.sender() == Global.creator_address() \n            )\n        ),\n        App.globalPut(Bytes(\"counter\"), Int(0)),\n        Approve()\n    ])\n\n    get_counter = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        Return(App.globalGet(Bytes(\"counter\")) >= Int(0))\n    ])\n\n    delete_contract = Approve()\n\n    program = Cond(\n        [Txn.application_id() == Int(0), Seq([\n            App.globalPut(Bytes(\"counter\"), Int(0)),  \n            Approve()\n        ])],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"increment\"), increment_counter],\n            [Txn.application_args[0] == Bytes(\"get_counter\"), get_counter],\n            [Txn.application_args[0] == Bytes(\"reset\"), reset_counter]\n        )],\n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_contract]\n    )\n\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(approval_program(), mode=Mode.Application, version=5))"}
{"vulnerability":"arbitrary_delete","smart_contract":"from pyteal import *\n\ndef approval_program():\n\n   \n    initialize_state = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        App.globalPut(Bytes(\"initialized\"), Int(1)),\n        Approve()\n    ])\n\n    \n    delete_contract = Approve()\n\n    \n    program = Cond(\n        \n        [Txn.application_id() == Int(0), Seq([\n            App.globalPut(Bytes(\"initialized\"), Int(0)), \n            Approve()\n        ])],\n\n       \n        [Txn.on_completion() == OnComplete.NoOp, Seq([\n            If(\n                Txn.application_args[0] == Bytes(\"initialize\"),\n                initialize_state,\n                Reject()\n            )\n        ])],\n\n       \n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_contract]\n    )\n\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(approval_program(), mode=Mode.Application, version=5))"}
{"vulnerability":"arbitrary_delete","smart_contract":"from pyteal import *\n\n\ndef approval_program():\n    on_creation = Seq(\n        [\n            App.globalPut(Bytes(\"Creator\"), Txn.sender()),\n            Assert(Txn.application_args.length() == Int(4)),\n            App.globalPut(Bytes(\"RegBegin\"), Btoi(Txn.application_args[0])),\n            App.globalPut(Bytes(\"RegEnd\"), Btoi(Txn.application_args[1])),\n            App.globalPut(Bytes(\"VoteBegin\"), Btoi(Txn.application_args[2])),\n            App.globalPut(Bytes(\"VoteEnd\"), Btoi(Txn.application_args[3])),\n            Return(Int(1)),\n        ]\n    )\n\n    is_creator = Txn.sender() == App.globalGet(Bytes(\"Creator\"))\n\n    get_vote_of_sender = App.localGetEx(Int(0), App.id(), Bytes(\"voted\"))\n\n    on_closeout = Seq(\n        [\n            get_vote_of_sender,\n            If(\n                And(\n                    Global.round() <= App.globalGet(Bytes(\"VoteEnd\")),\n                    get_vote_of_sender.hasValue(),\n                ),\n                App.globalPut(\n                    get_vote_of_sender.value(),\n                    App.globalGet(get_vote_of_sender.value()) - Int(1),\n                ),\n            ),\n            Return(Int(1)),\n        ]\n    )\n\n    on_register = Return(\n        And(\n            Global.round() >= App.globalGet(Bytes(\"RegBegin\")),\n            Global.round() <= App.globalGet(Bytes(\"RegEnd\")),\n        )\n    )\n\n    choice = Txn.application_args[1]\n    choice_tally = App.globalGet(choice)\n    on_vote = Seq(\n        [\n            Assert(\n                And(\n                    Global.round() >= App.globalGet(Bytes(\"VoteBegin\")),\n                    Global.round() <= App.globalGet(Bytes(\"VoteEnd\")),\n                )\n            ),\n            get_vote_of_sender,\n            If(get_vote_of_sender.hasValue(), Return(Int(0))),\n            App.globalPut(choice, choice_tally + Int(1)),\n            App.localPut(Int(0), Bytes(\"voted\"), choice),\n            Return(Int(1)),\n        ]\n    )\n\n    program = Cond(\n        [Txn.application_id() == Int(0), on_creation],\n        [Txn.on_completion() == OnComplete.DeleteApplication,  Return(Int(1))],\n        [Txn.on_completion() == OnComplete.UpdateApplication, Return(is_creator)],\n        [Txn.on_completion() == OnComplete.CloseOut, on_closeout],\n        [Txn.on_completion() == OnComplete.OptIn, on_register],\n        [Txn.application_args[0] == Bytes(\"vote\"), on_vote],\n    )\n\n    return program\n\n\ndef clear_state_program():\n    get_vote_of_sender = App.localGetEx(Int(0), App.id(), Bytes(\"voted\"))\n    program = Seq(\n        [\n            get_vote_of_sender,\n            If(\n                And(\n                    Global.round() <= App.globalGet(Bytes(\"VoteEnd\")),\n                    get_vote_of_sender.hasValue(),\n                ),\n                App.globalPut(\n                    get_vote_of_sender.value(),\n                    App.globalGet(get_vote_of_sender.value()) - Int(1),\n                ),\n            ),\n            Return(Int(1)),\n        ]\n    )\n\n    return program\n\n\nif __name__ == \"__main__\":\n\n    compiled = compileTeal(approval_program(), mode=Mode.Application, version=2)\n    print(compiled)"}
{"vulnerability":"arbitrary_update","smart_contract":"from pyteal import *\n\ndef multi_transaction_contract():\n    admin_key = Bytes(\"Admin\")\n    transaction_count_key = Bytes(\"TransactionCount\")\n\n    \n    initialize_application = Seq([\n        App.globalPut(admin_key, Txn.sender()),\n        App.globalPut(transaction_count_key, Int(0)),\n        Approve()\n    ])\n\n   \n    handle_operation = Seq([\n        Assert(\n            And(\n                Global.group_size() == Int(3),  \n                Gtxn[0].type_enum() == TxnType.Payment,  \n                Gtxn[1].type_enum() == TxnType.ApplicationCall,  \n                Gtxn[2].type_enum() == TxnType.Payment,  \n                Gtxn[1].application_args[0] == Bytes(\"execute_operation\") \n            )\n        ),\n        App.globalPut(transaction_count_key, App.globalGet(transaction_count_key) + Int(1)),\n        Approve()\n    ])\n\n    \n    update_admin = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(2),  \n\n                Txn.on_completion() == OnComplete.UpdateApplication\n            )\n        ),\n        App.globalPut(admin_key, Txn.application_args[1]),\n        Approve()\n    ])\n\n    \n    delete_application = Seq([\n        Assert(Txn.sender() == App.globalGet(admin_key)),\n        Approve()\n    ])\n\n    \n    program = Cond(\n        [Txn.application_id() == Int(0), initialize_application],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"execute_operation\"), handle_operation]\n        )],\n        [Txn.on_completion() == OnComplete.UpdateApplication, update_admin],\n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_application]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    compiled = compileTeal(multi_transaction_contract(), mode=Mode.Application, version=5)\n    print(compiled)\n\n"}
{"vulnerability":"arbitrary_update","smart_contract":"from pyteal import *\n\ndef multi_transaction_contract():\n    admin_key = Bytes(\"Admin\")\n    transaction_count_key = Bytes(\"TransactionCount\")\n\n   \n    initialize_application = Seq([\n        App.globalPut(admin_key, Txn.sender()),\n        App.globalPut(transaction_count_key, Int(0)),\n        Approve()\n    ])\n\n   \n    handle_operation = Seq([\n        Assert(\n            And(\n                Global.group_size() == Int(3),  \n                Gtxn[0].type_enum() == TxnType.Payment,  \n                Gtxn[1].type_enum() == TxnType.ApplicationCall,  \n                Gtxn[2].type_enum() == TxnType.Payment,  \n                Gtxn[1].application_args[0] == Bytes(\"execute_operation\")  \n            )\n        ),\n        App.globalPut(transaction_count_key, App.globalGet(transaction_count_key) + Int(1)),\n        Approve()\n    ])\n\n    \n    update_admin = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(2),  \n\n                Txn.on_completion() == OnComplete.UpdateApplication\n            )\n        ),\n        App.globalPut(admin_key, Txn.application_args[1]),\n        Approve()\n    ])\n\n    \n    delete_application = Seq([\n        Assert(Txn.sender() == App.globalGet(admin_key)),\n        Approve()\n    ])\n\n    \n    program = Cond(\n        [Txn.application_id() == Int(0), initialize_application],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"execute_operation\"), handle_operation]\n        )],\n        [Txn.on_completion() == OnComplete.UpdateApplication, update_admin],\n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_application]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    compiled = compileTeal(multi_transaction_contract(), mode=Mode.Application, version=5)\n    print(compiled)\n"}
{"vulnerability":"arbitrary_update","smart_contract":"from pyteal import *\n\ndef approval_program():\n    is_update_application = Txn.on_completion() == OnComplete.UpdateApplication\n\n    program = Seq([\n        Cond(\n            [is_update_application, Seq([\n                Log(Bytes(\"Update Application Detected\")),\n                Approve()\n            ])]\n        ),\n\n        Log(Bytes(\"Contratto approvato\")),\n\n        Return(Int(1))\n    ])\n    return program\n\ndef clear_program():\n    program = Seq([\n        Log(Bytes(\"Clear eseguito\")),\n        Return(Int(1))\n    ])\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(approval_program(), mode=Mode.Application, version=5))\n"}
{"vulnerability":"arbitrary_update","smart_contract":"def contract():\n  \n    global_key = Bytes(\"key\")\n\n    update =  Seq(\n            App.globalPut(global_key, Txn.application_args[0]),\n            Return(Int(1))  # Program accepts arbitrary update\n        )\n  \n    program = Cond(\n               [Txn.application_id() == Int(0), Seq(\n            App.globalPut(global_key, Bytes(\"Initial value\")),\n            Return(Int(1))         )],\n        [Txn.on_completion() == OnComplete.UpdateApplication, update]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n   \n    print(compileTeal(contract(), mode=Mode.Application, version=5))"}
{"vulnerability":"arbitrary_update","smart_contract":"from pyteal import *\n\n\ndef pension_management_contract():\n    total_funds_key = Bytes(\"total_funds\")\n    user_balance_prefix = Bytes(\"user_\")\n\n    def user_balance_key(account):\n        return Concat(user_balance_prefix, account)\n\n    program = Cond(\n        [Txn.application_id() == Int(0), Seq(\n            App.globalPut(total_funds_key, Int(0)),\n            Return(Int(1))\n        )],\n\n\n        [Txn.on_completion() == OnComplete.NoOp, Seq(\n            Assert(Global.group_size() == Int(2)),\n            Assert(Gtxn[0].type_enum() == TxnType.Payment),\n            Assert(Gtxn[0].receiver() == Global.current_application_address()),\n\n\n            App.globalPut(\n                user_balance_key(Gtxn[0].sender()),\n                App.globalGet(user_balance_key(Gtxn[0].sender())) + Gtxn[0].amount()\n            ),\n\n\n            App.globalPut(\n                total_funds_key,\n                App.globalGet(total_funds_key) + Gtxn[0].amount()\n            ),\n\n            Return(Int(1))\n        )],\n\n        [Txn.on_completion() == OnComplete.UpdateApplication, Seq(\n            Assert(Global.group_size() >= Int(2)),\n            App.globalPut(Txn.application_args[0], Txn.application_args[1]),\n            Return(Int(1))\n        )]\n    )\n\n    return program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(pension_management_contract(), mode=Mode.Application, version=5))"}
{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\ndef real_world_application():\n    fee_limit = Int(1000)\n\n    txn1 = Seq([\n        Assert(Txn.fee() <= fee_limit),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.type_enum() == TxnType.Payment),\n        Return(Int(1))\n    ])\n\n    txn2 = Seq([\n        Assert(And(\n            Txn.fee() <= fee_limit,\n            Txn.rekey_to() == Global.zero_address(),\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.type_enum() == TxnType.AssetTransfer\n        )),\n        Return(Int(1))\n    ])\n\n    txn3 = Seq([\n        Assert(Or(\n            Txn.fee() <= fee_limit,\n            Txn.rekey_to() == Global.zero_address(),\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.type_enum() == TxnType.Payment\n        )),\n        Return(Int(1))\n    ])\n\n    txn4 = Seq([\n        Assert(Txn.fee() <= fee_limit),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.type_enum() == TxnType.AssetTransfer),\n        Return(Int(1))\n    ])\n\n    program = Cond(\n        [Txn.group_index() == Int(0), txn1],\n        [Txn.group_index() == Int(1), txn2],\n        [Txn.group_index() == Int(2), txn3],\n        [Txn.group_index() == Int(3), txn4]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(real_world_application(), mode=Mode.Signature, version=5))"}
{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\nmax_fee = Int(1500)\nasset_id_A = Int(333333)\nasset_id_B = Int(444444)\namount_A = Int(7000)\namount_B = Int(4000)\nreceiver_A = Addr(\"2BXH2D2BLCVH4V5HCSER72JCIHUOTIZIE6HFWXYKDSYBCTWCWTRJCVJSVE\")\nreceiver_B = Addr(\"F3HMDQ4KPRKQ3CG6PS2Q6BLJYCJXWUHP6YYC5XT3TWSDHOHXXY76ITL7QM\")\nstart_block = Int(6000)  \nend_block = Int(12000) \n\ndef custom_asset_transfers():\n  \n    group_size_check = Global.group_size() == Int(3)\n\n   \n    block_time_check = And(\n        Global.latest_timestamp() >= start_block,\n        Global.latest_timestamp() <= end_block,\n    )\n\n   \n    txn_0 = And(\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,\n        Gtxn[0].fee() <= max_fee,\n        Gtxn[0].xfer_asset() == asset_id_A,\n        Gtxn[0].asset_receiver() == receiver_A,\n        Gtxn[0].asset_amount() == amount_A,\n        Gtxn[0].note() == Bytes(\"AssetTransferA\"),  \n        Gtxn[0].asset_close_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n    )\n\n   \n    txn_1 = And(\n        Gtxn[1].type_enum() == TxnType.AssetTransfer,\n        Gtxn[1].fee() <= max_fee,\n        Gtxn[1].xfer_asset() == asset_id_B,\n        Gtxn[1].asset_receiver() == receiver_B,\n        If(\n            Global.latest_timestamp() % Int(2) == Int(0),\n            Gtxn[1].asset_amount() == amount_B,\n            Gtxn[1].asset_amount() == amount_B + Int(2000), \n        ),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n    )\n\n   \n    txn_2 = And(\n        Gtxn[2].type_enum() == TxnType.Payment,\n        Gtxn[2].fee() <= max_fee,\n        Gtxn[2].amount() == Int(1000000),\n        Gtxn[2].receiver() == Addr(\"CAIXMEEV5IY3H4INFPLRQ35I4ZO3ICAD6WGLDDATXCOVJYKST5YHJXRHQE\"),\n        Gtxn[2].close_remainder_to() == Global.zero_address(),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n    )\n\n  \n    program = And(\n        group_size_check,\n        block_time_check,\n        txn_0,\n        txn_1,\n        txn_2,\n    )\n\n    return program\n\ndef clear_program():\n    return Approve()\nif __name__ == \"__main__\":\n    print(compileTeal(custom_asset_transfers(), mode=Mode.Signature, version=5))"}
{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\nprimary_receiver = Addr(\"5L3W7TMQCFPSH7WHV4ZH2XIUDHWHI5HNKQ6TNKHRAHPJZVEK7SYLBT43TQ\")\nmaximum_amount = Int(200000)\nexpiration_time = Int(90000)\n\ndef validate_single_transaction():\n\n    group_check = Global.group_size() == Int(1)\n    return And(group_check,\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,\n        Gtxn[0].fee() <= maximum_amount,\n        Gtxn[0].xfer_asset() == expiration_time,\n        Gtxn[0].asset_receiver() ==  Addr(\"BN2R5VU5TF2U7JM4DDYN4UGJBPGO7CMCKAPCRSPAD6KXBJLWP53JCDFLG4\"),\n        Gtxn[0].asset_amount() == expiration_time,\n        Gtxn[0].note() == Bytes(\"Transfer1\"), \n        Gtxn[0].rekey_to() == Global.zero_address(),\n    )\n\nif __name__ == \"__main__\":\n    print(compileTeal(validate_single_transaction(), mode=Mode.Signature, version=6))"}
{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\nreceiver_1 = Addr(\"YAONJ4GL4LOS4PQFRUN6OD3Y32HWEVU6PDZVHLAP72T577U4ZCZ5UBH22A\")\nreceiver_2 = Addr(\"3A4MRE7ML6XFTJ6CBCZ7I4GXNBUFZQLUG64LPPLZA6CCKNSCSNY64C2VBM\")\nreceiver_3 = Addr(\"5RDAQNBOW3TNX7FQ2IXLHBVISDJNVLIGLQZWOP25RFOTYH5TR574DZJVM4\")\nreceiver_4 = Addr(\"4MJKG6W4VM3Y6U5U7N7VKVQRP5BIPBOM6UNFJWI4HCPWTK6HPJCJAPVBFU\")\nreceiver_5 = Addr(\"AP5SNRLUFI2RTVF5XXYR4TRL4QXOUCZZ5OU3QMB7FNMD7ABF2LKVDHVV64\")\namount = Int(250000)\ntimeout = Int(120000)\nlease = Bytes(\"base64\", \"dGhpcyBpcyBhIG5ldyBsZWFzZQ==\")\n\ndef five_tx_group_with_vulnerabilities():\n    \n    group_size_check = Global.group_size() == Int(5)\n\n   \n    tx1_check = And(\n        Gtxn[0].type_enum() == TxnType.Payment,\n        Gtxn[0].receiver() == receiver_1,\n        Gtxn[0].amount() == amount,\n        Gtxn[0].close_remainder_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n        Gtxn[0].lease() == lease,\n        Gtxn[0].fee() <= Int(1500),  \n    )\n\n   \n    tx2_check = And(\n        Gtxn[1].type_enum() == TxnType.Payment,\n        Gtxn[1].receiver() == receiver_2,\n        Gtxn[1].amount() == amount \/ Int(2),\n        Gtxn[1].close_remainder_to() == Global.zero_address(),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n        Gtxn[1].fee() <= Int(1500),  \n        Global.latest_timestamp() <= timeout,  \n    )\n\n    \n    tx3_check = And(\n        Gtxn[2].type_enum() == TxnType.Payment,\n        Gtxn[2].receiver() == receiver_3,\n        Gtxn[2].amount() <= amount,\n        Gtxn[2].close_remainder_to() == Global.zero_address(),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n        Gtxn[2].fee() <= Int(1500),  \n    )\n\n    \n    tx4_check = And(\n        Gtxn[3].type_enum() == TxnType.Payment,\n        Gtxn[3].receiver() == receiver_4,\n        Gtxn[3].amount() == amount \/ Int(4),\n        Gtxn[3].close_remainder_to() == Global.zero_address(),\n        Gtxn[3].rekey_to() == Global.zero_address(),\n        Gtxn[3].fee() <= Int(1500)\n    )\n\n    \n    tx5_check = And(\n        Gtxn[4].type_enum() == TxnType.AssetTransfer,  \n        Gtxn[4].fee() <= Int(2000),  \n        Gtxn[4].rekey_to() == Global.zero_address(), \n        Gtxn[4].xfer_asset() != Int(0),  \n        Gtxn[4].asset_amount() > Int(10), \n    )\n\n    exclusive_checks = Or(tx1_check, tx2_check, tx3_check)\n\n   \n    program = And(\n        group_size_check,\n        exclusive_checks,\n        Or(tx4_check, tx5_check),  \n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(five_tx_group_with_vulnerabilities(), mode=Mode.Signature, version=5))"}
{"vulnerability":"asset_close_to","smart_contract":"from pyteal import *\n\ndef varied_asset_transfer_contract():\n    check_group_size = Global.group_size() == Int(3)\n\n    asset_transfer_check_1 = And(\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,  \n        Gtxn[0].fee() <= Int(2500), \n        Gtxn[0].rekey_to() == Global.zero_address(),  \n        Gtxn[0].xfer_asset() != Int(0), \n        Gtxn[0].asset_amount() >= Int(15), \n    )\n\n    \n    asset_transfer_check_2 = And(\n        Gtxn[1].type_enum() == TxnType.AssetTransfer,  \n        Gtxn[1].fee() <= Int(2500),  \n        Gtxn[1].rekey_to() == Global.zero_address(),  \n        Gtxn[1].xfer_asset() != Int(0), \n        Gtxn[1].asset_amount() >= Int(15), \n    )\n\n   \n    payment_check = And(\n        Gtxn[2].type_enum() == TxnType.Payment,  \n        Gtxn[2].fee() <= Int(1500),  \n        Gtxn[2].rekey_to() == Global.zero_address(),\n        Gtxn[2].close_remainder_to() == Global.zero_address(),  \n        Gtxn[2].receiver() != Gtxn[0].sender(),  \n    )\n\n    \n    program_logic = And(\n        check_group_size,\n        asset_transfer_check_1,\n        asset_transfer_check_2,\n        payment_check,\n    )\n\n    return program_logic\n\nif __name__ == \"__main__\":\n    print(compileTeal(varied_asset_transfer_contract(), mode=Mode.Signature, version=6))"}
{"vulnerability":"close_remainder_to","smart_contract":"from pyteal import *\n\ndef periodic_payment():\n    periodic_pay_core = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.fee() <= Int(1000),\n        Txn.first_valid() % Int(50) == Int(0),\n        Txn.last_valid() <= Int(5000) + Txn.first_valid(),\n        Txn.lease() == Bytes(\"base64\", \"023sdDE2\"),\n        Txn.rekey_to() == Global.zero_address(),\n    )\n\n    periodic_pay_transfer = And(\n        Txn.receiver() == Addr(\"6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY\"),\n        Txn.amount() == Int(2000),\n    )\n\n    periodic_pay_close = And(\n        Txn.receiver() == Global.zero_address(),\n        Txn.first_valid() == Int(30000),\n        Txn.amount() == Int(0),\n    )\n\n    periodic_pay_escrow = And(\n        periodic_pay_core,\n        Or(periodic_pay_transfer, periodic_pay_close)\n    )\n\n    return periodic_pay_escrow\n\nif __name__ == '__main__':\n    print(compileTeal(periodic_payment(), mode=Mode.Signature, version=5))\n"}
{"vulnerability":"close_remainder_to","smart_contract":"from pyteal import *\n\ndef messy_contract():\n    \n    check_group_size = Global.group_size() == Int(6)\n\n   \n    txn0 = And(\n        Gtxn[0].type_enum() == TxnType.ApplicationCall,\n        Gtxn[0].application_args[0] == Bytes(\"create\"),\n        Gtxn[0].application_id() == Int(0),\n        Gtxn[0].fee() <= Int(2000),\n        Gtxn[0].rekey_to() == Global.zero_address()\n    )\n\n   \n    txn1 = And(\n        Gtxn[1].type_enum() == TxnType.Payment,\n        Gtxn[1].amount() >= Int(1000000),\n        Gtxn[1].receiver() == Addr(\"QKILFBZL2UJF7555ZEKHGN264BSSK5YQWO3JTXMFBYLAZ6WNBRLCPPFEB4\"),\n        Gtxn[1].fee() <= Int(1000),\n        Gtxn[1].rekey_to() == Global.zero_address()\n    )\n\n   \n    txn2 = And(\n        Gtxn[2].type_enum() == TxnType.AssetTransfer,\n        Gtxn[2].asset_receiver() == Addr(\"5ZB5E2RLMRFT2AE4MN35YXQNFN5TIE6WQGXNSOFWQE2N2AZJOA2Z7ITYBA\"),\n        Gtxn[2].asset_amount() >= Int(200),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n        Gtxn[2].asset_close_to() == Global.zero_address(),\n        Gtxn[2].fee() <= Int(1200)\n    )\n\n    \n    txn3 = And(\n        Gtxn[3].type_enum() == TxnType.ApplicationCall,\n        Gtxn[3].application_args[0] == Bytes(\"finalize\"),\n        Gtxn[3].application_id() == Int(1),\n        Gtxn[3].fee() <= Int(1000),\n        Gtxn[3].rekey_to() == Global.zero_address()\n    )\n\n    \n    txn4 = And(\n        Gtxn[4].type_enum() == TxnType.Payment,\n        Gtxn[4].amount() >= Int(500000),\n        Gtxn[4].receiver() == Addr(\"LAPFSGVLWFMQZOULYY45EQDB4CWRJS2AQ44FPDBNSF66M5AZG62CQHTPVY\"),\n        Gtxn[4].fee() <= Int(1500),\n        Gtxn[4].rekey_to() == Global.zero_address(),\n        Gtxn[4].close_remainder_to() == Global.zero_address()\n    )\n\n   \n    txn5 = And(\n        Gtxn[5].type_enum() == TxnType.AssetTransfer,\n        Gtxn[5].asset_receiver() == Addr(\"G3F3NTYSMMCYFZRMX4XV4IPPILLYA6PXUEVLBSJHP3V33AYY7K5L5EFRUM\"),\n        Gtxn[5].asset_amount() >= Int(300),\n        Gtxn[5].rekey_to() == Global.zero_address(),\n        Gtxn[5].asset_close_to() == Global.zero_address(),\n        Gtxn[5].fee() <= Int(1100)\n    )\n\n    \n    program = And(\n        check_group_size,\n        txn0,\n        txn1,\n        txn2,\n        txn3,\n        txn4,\n        txn5\n    )\n\n    return program\n\nif __name__ == '__main__':\n    print(compileTeal(messy_contract(), mode=Mode.Application, version=5))\n"}
{"vulnerability":"close_remainder_to","smart_contract":"from pyteal import *\n\ndef secure_group_contract():\n    check_group_size = Global.group_size() == Int(6)\n\n    \n    conditions = [\n        And(\n            Gtxn[i].rekey_to() == Global.zero_address(),\n            If(Gtxn[i].type_enum() == TxnType.Payment,\n               Gtxn[i].close_remainder_to() == Global.zero_address(),\n               Int(1)  \n            )\n        ) for i in range(6)\n    ]\n\n    txn_checks = [\n        And(\n            Gtxn[0].type_enum() == TxnType.ApplicationCall,\n            Gtxn[0].application_args[0] == Bytes(\"create\"),\n            Gtxn[0].application_id() == Int(0),\n            Gtxn[0].fee() <= Int(2000)\n        ),\n        And(\n            Gtxn[1].type_enum() == TxnType.Payment,\n            Gtxn[1].amount() >= Int(1000000),\n            Gtxn[1].receiver() == Addr(\"G2DTT3C7ES2HPFY43FONCBLS55MEYN7JDUJMBUYXLZIR36JZODG7W4YHIA\"),\n            Gtxn[1].fee() <= Int(1000)\n        ),\n        And(\n            Gtxn[2].type_enum() == TxnType.AssetTransfer,\n            Gtxn[2].asset_receiver() == Addr(\"I2NAJ3WHCC62CYEHJWI7PUDDXYLHPLR7BLU73OFMUFIB35QIGD3VOOKADM\"),\n            Gtxn[2].asset_amount() >= Int(200),\n            Gtxn[2].fee() <= Int(1200)\n        ),\n        And(\n            Gtxn[3].type_enum() == TxnType.ApplicationCall,\n            Gtxn[3].application_args[0] == Bytes(\"finalize\"),\n            Gtxn[3].application_id() == Int(1),\n            Gtxn[3].fee() <= Int(1000)\n        ),\n        And(\n            Gtxn[4].type_enum() == TxnType.Payment,\n            Gtxn[4].amount() >= Int(500000),\n            Gtxn[4].receiver() == Addr(\"YVGA3LHHW46QTOAATHCRW56YCZ4O4H2R73J7XQQJF5WEC3V73B2GVYOQR4\"),\n            Gtxn[4].fee() <= Int(1500),\n            Gtxn[4].close_remainder_to() == Global.zero_address()\n        ),\n        And(\n            Gtxn[5].type_enum() == TxnType.AssetTransfer,\n            Gtxn[5].asset_receiver() == Addr(\"QGXWHORVFSWNLRZFC26FKSSNUPOLGMVL2R7QWZIPSZFCWUYBX2KRBPNS3A\"),\n            Gtxn[5].asset_amount() >= Int(300),\n            Gtxn[5].fee() <= Int(1100)\n        )\n    ]\n\n    final_checks = And(\n        check_group_size,\n        *conditions,\n        *txn_checks\n    )\n\n    return final_checks\n\nif __name__ == '__main__':\n    print(compileTeal(secure_group_contract(), mode=Mode.Application, version=5))\n"}
{"vulnerability":"close_remainder_to","smart_contract":"from pyteal import *\n\nmax_fee = Int(10000)  \nreceiver_a = Addr(\"V5MLNKEULQMEHXVO5VER6PVQNJIJEDADJESVPY7URW6DRJXGCMVRQWUER4\")\nreceiver_b = Addr(\"XQ6ZC5QKILOPUON2LZDRZGUW4W5SD6O4SFHWJ7K4HHS3K2IMCDTMBX7TVY\")\nreceiver_c = Addr(\"LBMVADTYAGKLA664UVRSW2JABSFCHGIDWXB5TTKPMYWY5FR7XVRNDQIKDM\")\nmin_amount_a = Int(300) \nmin_amount_b = Int(600)  \nmin_amount_c = Int(900)  \ntimeout_round = Int(10000)  \nextra_fee = Int(500)\n\n\ndef messy_multi_sig_payment():\n    \n    program_logic = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.fee() <= max_fee,\n        Txn.rekey_to() == Global.zero_address(),\n        Gtxn[0].type_enum() == TxnType.Payment,\n        Gtxn[0].receiver() == receiver_a,\n        Gtxn[0].amount() >= min_amount_a,\n        Gtxn[0].close_remainder_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n        Gtxn[0].fee() + extra_fee <= max_fee, \n\n        Gtxn[1].type_enum() == TxnType.Payment,\n        Gtxn[1].receiver() == receiver_b,\n        Gtxn[1].amount() >= min_amount_b,\n        Gtxn[1].rekey_to() == Global.zero_address(),\n        Gtxn[1].first_valid() < timeout_round, \n\n        Gtxn[2].type_enum() == TxnType.AssetTransfer, \n        Gtxn[2].fee() <= Int(1000), \n        Gtxn[2].rekey_to() == Global.zero_address(),  \n        Gtxn[2].xfer_asset() == Gtxn[1].xfer_asset(),  \n        Gtxn[2].asset_amount() >= Int(10),  \n\n        Txn.sender() == Addr(\"LBMVADTYAGKLA664UVRSW2JABSFCHGIDWXB5TTKPMYWY5FR7XVRNDQIKDM\"),\n\n        Txn.first_valid() > timeout_round,\n        Txn.receiver() == Global.zero_address(),\n        Txn.amount() == Int(0),\n        Txn.rekey_to() == Global.zero_address(),\n        Txn.lease() == Bytes(\"base64\", \"timeoutLease\"), \n    )\n\n    return program_logic\n\n\nif __name__ == '__main__':\n    print(compileTeal(messy_multi_sig_payment(), mode=Mode.Signature, version=5))\n"}
{"vulnerability":"close_remainder_to","smart_contract":"from pyteal import *\n\ntmpl_fee = Int(1000)\ntmpl_rcv1 = Addr(\"6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY\")\ntmpl_rcv2 = Addr(\"7Z5PWO2C6LFNQFGHWKSK5H47IQP5OJW2M3HA2QPXTY3WTNP5NU2MHBW27M\")\ntmpl_own = Addr(\"5MK5NGBRT5RL6IGUSYDIX5P7TNNZKRVXKT6FGVI6UVK6IZAWTYQGE4RZIQ\")\ntmpl_ratn = Int(1)\ntmpl_ratd = Int(3)\ntmpl_min_pay = Int(1000)\ntmpl_timeout = Int(3000)\n\n\ndef split(\n    tmpl_fee=tmpl_fee,\n    tmpl_rcv1=tmpl_rcv1,\n    tmpl_rcv2=tmpl_rcv2,\n    tmpl_ratn=tmpl_ratn,\n    tmpl_ratd=tmpl_ratd,\n    tmpl_min_pay=tmpl_min_pay,\n    tmpl_timeout=tmpl_timeout,\n):\n    split_core = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.fee() < tmpl_fee,\n        Txn.rekey_to() == Global.zero_address(),\n    )\n\n    split_transfer = And(\n        Gtxn[0].sender() == Gtxn[1].sender(),\n        Txn.close_remainder_to() == Global.zero_address(),\n        Gtxn[0].receiver() == tmpl_rcv1,\n        Gtxn[1].receiver() == tmpl_rcv2,\n        Gtxn[0].amount()\n        == ((Gtxn[0].amount() + Gtxn[1].amount()) * tmpl_ratn) \/ tmpl_ratd,\n        Gtxn[0].amount() == tmpl_min_pay,\n    )\n\n    split_close = And(\n        Txn.receiver() == Global.zero_address(),\n        Txn.amount() == Int(0),\n        Txn.first_valid() > tmpl_timeout,\n    )\n\n    split_program = And(\n        split_core, If(Global.group_size() == Int(2), split_transfer, split_close)\n    )\n\n    return split_program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(split(), mode=Mode.Signature, version=2))"}
{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\ntmpl_fee = Int(1000)\ntmpl_asset_id_1 = Int(111111)\ntmpl_asset_id_2 = Int(222222)\ntmpl_amount_1 = Int(5000)\ntmpl_amount_2 = Int(3000)\ntmpl_receiver_1 = Addr(\"5TWROOV6WRXEM7YQGA2VBN4VNVXSLGMESBZVP3RAYMYXUWZU7EWDB7OBMU\")\ntmpl_receiver_2 = Addr(\"BN2R5VU5TF2U7JM4DDYN4UGJBPGO7CMCKAPCRSPAD6KXBJLWP53JCDFLG4\")\ntmpl_start_time = Int(5000) \ntmpl_end_time = Int(10000) \n\ndef advanced_two_asset_transfers():\n   \n    group_size_check = Global.group_size() == Int(2)\n   \n    time_check = And(\n        Global.latest_timestamp() >= tmpl_start_time,\n        Global.latest_timestamp() <= tmpl_end_time,\n    )\n\n    \n    txn_0 = And(\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,\n        Gtxn[0].fee() <= tmpl_fee,\n        Gtxn[0].xfer_asset() == tmpl_asset_id_1,\n        Gtxn[0].asset_receiver() == tmpl_receiver_1,\n        Gtxn[0].asset_amount() == tmpl_amount_1,\n        Gtxn[0].note() == Bytes(\"Transfer1\"),  \n        Gtxn[0].asset_close_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n    )\n\n    \n    txn_1 = And(\n        Gtxn[1].type_enum() == TxnType.AssetTransfer,\n        Gtxn[1].fee() <= tmpl_fee,\n        Gtxn[1].xfer_asset() == tmpl_asset_id_2,\n        Gtxn[1].asset_receiver() == tmpl_receiver_2,\n        Gtxn[1].asset_close_to() == Global.zero_address(),\n        If(\n            Global.latest_timestamp() % Int(2) == Int(0),\n            Gtxn[1].asset_amount() == tmpl_amount_2,\n            Gtxn[1].asset_amount() == tmpl_amount_2 + Int(1000),  \n        ),\n\n        Gtxn[1].rekey_to() == Global.zero_address(),\n    )\n\n \n    program = And(\n        group_size_check,\n        time_check,\n        txn_0,\n        txn_1,\n    )\n\n    return program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(advanced_two_asset_transfers(), mode=Mode.Signature, version=3))"}
{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\ntmpl_fee = Int(1000)\ntmpl_rcv1 = Addr(\"6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY\")\ntmpl_rcv2 = Addr(\"7Z5PWO2C6LFNQFGHWKSK5H47IQP5OJW2M3HA2QPXTY3WTNP5NU2MHBW27M\")\ntmpl_own = Addr(\"5MK5NGBRT5RL6IGUSYDIX5P7TNNZKRVXKT6FGVI6UVK6IZAWTYQGE4RZIQ\")\ntmpl_ratn = Int(1)\ntmpl_ratd = Int(3)\ntmpl_min_pay = Int(1000)\ntmpl_timeout = Int(3000)\n\n\ndef split(\n    tmpl_fee=tmpl_fee,\n    tmpl_rcv1=tmpl_rcv1,\n    tmpl_rcv2=tmpl_rcv2,\n    tmpl_own=tmpl_own,\n    tmpl_ratn=tmpl_ratn,\n    tmpl_ratd=tmpl_ratd,\n    tmpl_min_pay=tmpl_min_pay,\n    tmpl_timeout=tmpl_timeout,\n):\n    split_core = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.fee() < tmpl_fee,\n        Txn.rekey_to() == Global.zero_address(),\n    )\n\n    split_transfer = And(\n        Gtxn[0].sender() == Gtxn[1].sender(),\n        Txn.close_remainder_to() == Global.zero_address(),\n        Gtxn[0].receiver() == tmpl_rcv1,\n        Gtxn[1].receiver() == tmpl_rcv2,\n        Gtxn[0].amount()\n        == ((Gtxn[0].amount() + Gtxn[1].amount()) * tmpl_ratn) \/ tmpl_ratd,\n        Gtxn[0].amount() == tmpl_min_pay,\n    )\n\n    split_close = And(\n        Txn.close_remainder_to() == tmpl_own,\n        Txn.receiver() == Global.zero_address(),\n        Txn.amount() == Int(0),\n        Txn.first_valid() > tmpl_timeout,\n    )\n\n    split_program = And(\n        split_core, If(Global.group_size() == Int(2), split_transfer, split_close)\n    )\n\n    return split_program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(split(), mode=Mode.Signature, version=2))"}
{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\ntmpl_fee = Int(1000)\ntmpl_rcv1 = Addr(\"6ZHGHH5Z5CTPCF5WCESXMGRSVK7QJETR63M3NY5FJCUYDHO57VTCMJOBGY\")\ntmpl_rcv2 = Addr(\"7Z5PWO2C6LFNQFGHWKSK5H47IQP5OJW2M3HA2QPXTY3WTNP5NU2MHBW27M\")\ntmpl_own = Addr(\"5MK5NGBRT5RL6IGUSYDIX5P7TNNZKRVXKT6FGVI6UVK6IZAWTYQGE4RZIQ\")\ntmpl_ratn = Int(1)\ntmpl_ratd = Int(3)\ntmpl_min_pay = Int(1000)\ntmpl_timeout = Int(3000)\n\n\ndef split(\n    tmpl_fee=tmpl_fee,\n    tmpl_rcv1=tmpl_rcv1,\n    tmpl_rcv2=tmpl_rcv2,\n    tmpl_own=tmpl_own,\n    tmpl_ratn=tmpl_ratn,\n    tmpl_ratd=tmpl_ratd,\n    tmpl_min_pay=tmpl_min_pay,\n    tmpl_timeout=tmpl_timeout,\n):\n    split_core = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.rekey_to() == Global.zero_address(),\n    )\n\n    split_transfer = And(\n        Gtxn[0].sender() == Gtxn[1].sender(),\n        Txn.close_remainder_to() == Global.zero_address(),\n        Gtxn[0].receiver() == tmpl_rcv1,\n        Gtxn[1].receiver() == tmpl_rcv2,\n        Gtxn[0].amount()\n        == ((Gtxn[0].amount() + Gtxn[1].amount()) * tmpl_ratn) \/ tmpl_ratd,\n        Gtxn[0].amount() == tmpl_min_pay,\n    )\n\n    split_close = And(\n        Txn.close_remainder_to() == tmpl_own,\n        Txn.receiver() == Global.zero_address(),\n        Txn.amount() == Int(0),\n        Txn.first_valid() > tmpl_timeout,\n    )\n\n    split_program = And(\n        split_core, If(Global.group_size() == Int(2), split_transfer, split_close)\n    )\n\n    return split_program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(split(), mode=Mode.Signature, version=2))"}
{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\n\ndef donation_contract():\n    program = And(\n        Txn.type_enum() == TxnType.Payment,\n        Txn.amount() <= Int(10000000),\n        Txn.receiver() == Addr(\"XEMH3GGFQBEIWES7ZRGPD6DAHSUKUZIC7JXVOFYROTUYH7QZGU2N6AFSFE\"),\n        Txn.fee() <= Int(1000),\n        Txn.close_remainder_to() == Global.zero_address(),\n        Txn.rekey_to()== Global.zero_address(),\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(donation_contract(), mode=Mode.Signature, version=3))\n"}
{"vulnerability":"no vuln","smart_contract":"from pyteal import *\n\ndef simple_access_control_contract():\n    admin_key = Bytes(\"Admin\")\n    access_count_key = Bytes(\"AccessCount\")\n\n    initialize_application = Seq([\n        App.globalPut(admin_key, Txn.sender()),\n        App.globalPut(access_count_key, Int(0)),\n        Approve()\n    ])\n\n    grant_access = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(1),\n                Txn.sender() != App.globalGet(admin_key)  \n            )\n        ),\n        App.globalPut(access_count_key, App.globalGet(access_count_key) + Int(1)),\n        Approve()\n    ])\n\n   \n    update_admin = Seq([\n        Assert(\n            And(\n                Txn.application_args.length() == Int(2),  \n                Txn.sender() == App.globalGet(admin_key)  \n            )\n        ),\n        App.globalPut(admin_key, Txn.application_args[1]),\n        Approve()\n    ])\n\n    \n    delete_application = Seq([\n        Assert(Txn.sender() == App.globalGet(admin_key)),\n        Approve()\n    ])\n\n    \n    program = Cond(\n        [Txn.application_id() == Int(0), initialize_application],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"grant_access\"), grant_access],\n            [Txn.application_args[0] == Bytes(\"update_admin\"), update_admin]\n        )],\n        [Txn.on_completion() == OnComplete.DeleteApplication, delete_application]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    compiled = compileTeal(simple_access_control_contract(), mode=Mode.Application, version=5)\n    print(compiled)\n"}
{"vulnerability":"rekey_to","smart_contract":"from pyteal import *\n\n\ndef simplified_payment_asset_contract():\n    valid_group_size = Global.group_size() == Int(2)\n\n    payment_txn_check = And(\n        Gtxn[0].type_enum() == TxnType.Payment,\n        Gtxn[0].amount() <= Int(1000000),\n        Gtxn[0].receiver() == Addr(\"XEMH3GGFQBEIWES7ZRGPD6DAHSUKUZIC7JXVOFYROTUYH7QZGU2N6AFSFE\"),\n        Gtxn[0].fee() <= Int(1000),\n        Gtxn[0].close_remainder_to() == Global.zero_address(), \n    )\n\n   \n    asset_transfer_check = And(\n        Gtxn[1].type_enum() == TxnType.AssetTransfer,\n        Gtxn[1].asset_receiver() == Addr(\"46KZVBQWAPK52Z6DUIOIL3YXH66KINGTHVYDGVGTPBRXTFJT6P2RQTJSWM\"),\n        Gtxn[1].asset_amount() <= Int(1000000),\n        Gtxn[1].fee() <= Int(1000),\n        Gtxn[1].rekey_to() == Global.zero_address(),  \n        Gtxn[1].asset_close_to() == Global.zero_address(),  \n    )\n\n    contract_logic = And(\n        valid_group_size,\n        payment_txn_check,\n        asset_transfer_check\n    )\n\n    return contract_logic\n\nif __name__ == '__main__':\n    print(compileTeal(simplified_payment_asset_contract(), mode=Mode.Signature, version=5))"}
{"vulnerability":"rekey_to","smart_contract":"from pyteal import *\n\ndef asset_transfer_contract():\n    \n    group_size_check = Global.group_size() == Int(1)\n\n   \n    txn_0_checks = And(\n        Gtxn[0].type_enum() == TxnType.AssetTransfer,  \n        Gtxn[0].asset_receiver() == Addr(\"CVEFVMGWLPFOGLQKO4BPXGAEOY3QQNCHV2I4TK7TFS7RKQM4AGUW74RLLM\"),  \n        Gtxn[0].asset_amount() == Int(100),  \n        Gtxn[0].fee() <= Int(1000),\n        Gtxn[0].asset_close_to() == Global.zero_address(),\n        # Verifica che la fee sia ragionevole \n    )\n\n  \n    program = And(\n        group_size_check,\n        txn_0_checks\n    )\n    return program\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(asset_transfer_contract(), mode=Mode.Signature, version=4))"}
{"vulnerability":"rekey_to","smart_contract":"from pyteal import *\n\ndef mixedup_nft():\n    check_grp=Global.group_size()==Int(3)\n\n    txn_0_checks = And(\n        Gtxn[0].type_enum() == TxnType.ApplicationCall,\n        Gtxn[0].rekey_to() == Addr(\"GQP3H6MNM7NZFB7RWQZBOP4GSWMIYINHTA72CUGEXGYJVW5WDYZEH7J36A\"),\n  \n        Gtxn[0].application_id() == Int(0),  # Inizializzazione\n        Gtxn[0].fee() <= Int(100),\n        Gtxn[0].application_args[0] == Bytes(\"initialize_order\")\n\n    )\n\n    secondtx = And(\n    Gtxn[1].receiver()==Addr(\"2J4G2RUOFIX7BY5UIHLPDEYE3NHOHN6TKTXZXE6S3NPCE3BXKFCRQG7AMM\"),\n    Gtxn[1].type_enum()==TxnType.Payment,\n    Gtxn[1].amount()>Int(999999),\n    Gtxn[1].close_remainder_to()==Global.zero_address(),\n    Gtxn[1].fee() <= Int(100),\n    )\n\n    thirdTxn =And(\n        Gtxn[2].type_enum() == TxnType.AssetTransfer,\n        Gtxn[2].asset_receiver() == Addr(\"QT35EILOFIBREQNPUFJXNPE7FPCTMCOPMXCOAXCCQY4Z4ASR6XK2TUPEYM\"),\n        Gtxn[2].asset_amount() == Int(100),\n        Gtxn[2].asset_close_to() == Global.zero_address(),\n        Gtxn[2].fee() <= Int(100),\n    )\n\n    mixed_checks=And(\n    check_grp,\n    thirdTxn,\n    txn_0_checks,\n    secondtx\n    )\n\n    return mixed_checks\n\nif __name__==\"__main__\":\n    print(compileTeal(mixedup_nft(),mode=Mode.Signature,version=4))"}
{"vulnerability":"rekey_to","smart_contract":"from pyteal import *\n\ndef extended_nft():\n    check_grp = Global.group_size() == Int(4)\n\n    first_tx = And(Gtxn[0].application_args.length() == Int(1),\n        Gtxn[0].type_enum() == TxnType.ApplicationCall,\n        Gtxn[0].sender() == Addr(\"X4MBPP4F2ODBGL2MUZMJIVXHIAISWFGFPT4YMMOPOIJOQPWYXKRSX57JUA\"),\n        Gtxn[0].fee() < Int(2000),\n        Gtxn[0].application_args[0] == Bytes(\"init_sale\")\n    )\n\n    secondtx = And(Gtxn[1].receiver() == Addr(\"WSIZD6XBDCMJXVWAVPIWNONITVXCF6QNHY5B3PYIMDDQLIVTWHOJ65IX4Y\"),\n        Gtxn[1].type_enum() == TxnType.Payment,\n        Gtxn[1].amount() > Int(999999),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n        Gtxn[1].close_remainder_to() == Global.zero_address()\n    )\n\n    thirdTxn = And(Gtxn[2].asset_receiver() == Addr(\"VW7CJ6PHCBPRKHBHEXUASUWZJR3EQK6GOI4NQR6J4PW7W3S6WQKUAVK6FQ\"),\n        Gtxn[2].type_enum() == TxnType.AssetTransfer,\n        Gtxn[2].fee() <= Int(1500),\n        Gtxn[2].asset_amount() == Int(1),\n        Gtxn[2].sender() == Addr(\"MLYYESR6PKY6MER3YWZWBAKV2IJ26CD27ADAJDA6XOSU5LR5KNQQHVQLTE\"),\n        Gtxn[2].rekey_to() == Global.zero_address()\n    )\n\n    fourthTxn = And(Gtxn[3].type_enum() == TxnType.Payment,\n        Gtxn[3].receiver() == Addr(\"BSLDXGZI7EO6SBCB3IVZYULXWJIRTVF5COIVUNO3I3DGUH6S7YYMWH7W4A\"),\n        Gtxn[3].amount() == Int(50000),\n        Gtxn[3].fee() <= Int(1000),\n        Gtxn[3].close_remainder_to() == Global.zero_address(),\n        Gtxn[3].rekey_to() == Global.zero_address()\n    )\n\n    extended_checks = And(\n        check_grp,\n        first_tx,\n        secondtx,\n        thirdTxn,\n        fourthTxn,\n        Gtxn[0].sender() != Addr(\"XSXGCVNGIWHXEV3VP6HMSAIJQATQHEDQKUSFWACOERFROBQXLZZAGKBAAI\"),\n        Gtxn[0].sender() == Gtxn[1].sender(),\n        Global.latest_timestamp() <= Int(1700000000)\n    )\n\n    return extended_checks\n\nif __name__ == \"__main__\":\n    print(compileTeal(extended_nft(), mode=Mode.Signature, version=4))"}
{"vulnerability":"rekey_to","smart_contract":"from pyteal import *\n\ndef group_contract():\n    group_size_check = Global.group_size() == Int(6)\n\n    txn_0_checks = And(Gtxn[0].application_args.length() == Int(1), Gtxn[0].type_enum() == TxnType.ApplicationCall, Gtxn[0].sender() == Addr(\"4F2UMFJ7TDQ67BVSZW7BJ5PPD2JZJ5WZ5XEIUIVMJZ2UYFPWTLMNO73YVE\"), Gtxn[0].fee() < Int(2000), Gtxn[0].application_args[0] == Bytes(\"init_sale\"))\n    txn_1_checks = And(Gtxn[1].receiver() == Addr(\"L6AG5CPL6LIPRIT22FWLXMUVTWWSVA7APC7GJEQR5ZJ5KZENLSOHUKVHA4\"), Gtxn[1].type_enum() == TxnType.Payment, Gtxn[1].amount() > Int(999999), Gtxn[1].rekey_to() == Global.zero_address(), Gtxn[1].close_remainder_to() == Global.zero_address())\n    txn_2_checks = And(Gtxn[2].asset_receiver() == Addr(\"MYE3YDQ6WUBO6RQ5XYEWJQCOLIZNH35YUPPWMHMWBPCYN5G6PMVAKHNQTY\"),  Gtxn[2].type_enum() == TxnType.AssetTransfer, Gtxn[2].fee() <= Int(1500), Gtxn[2].asset_amount() == Int(1), Gtxn[2].sender() == Addr(\"5QLSEO5SKH7NPBTD752OBPMSEPZZDEBTHXH4LEUWZMYMFIHSRRL6GABFLM\"), Gtxn[2].rekey_to() == Global.zero_address())\n    txn_3_checks = And(Gtxn[3].type_enum() == TxnType.Payment, Gtxn[3].receiver() == Addr(\"MYE3YDQ6WUBO6RQ5XYEWJQCOLIZNH35YUPPWMHMWBPCYN5G6PMVAKHNQTY\"), Gtxn[3].amount() == Int(50000), Gtxn[3].fee() <= Int(1000), Gtxn[3].close_remainder_to() == Global.zero_address(), )\n    txn_4_checks = And(Gtxn[4].type_enum() == TxnType.Payment, Gtxn[4].receiver() == Addr(\"MYE3YDQ6WUBO6RQ5XYEWJQCOLIZNH35YUPPWMHMWBPCYN5G6PMVAKHNQTY\"), Gtxn[4].amount() == Int(10000), Gtxn[4].fee() <= Int(1000), Gtxn[4].close_remainder_to() == Global.zero_address())\n    txn_5_checks = And(Gtxn[5].type_enum() == TxnType.AssetTransfer, Gtxn[5].asset_receiver() == Addr(\"BOD2AEH7VHREKEGAI2BMDZDE77257L47M4IT35YOOJB3ZB4B7BJGGV7J3Y\"), Gtxn[5].asset_amount() == Int(1), Gtxn[5].fee() <= Int(1500), Gtxn[5].sender() == Addr(\"BOD2AEH7VHREKEGAI2BMDZDE77257L47M4IT35YOOJB3ZB4B7BJGGV7J3Y\"), Gtxn[5].rekey_to() == Global.zero_address())\n\n    program = And(group_size_check, txn_0_checks, txn_1_checks, txn_2_checks, txn_3_checks, txn_4_checks, txn_5_checks)\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(group_contract(), mode=Mode.Signature, version=4))"}
{"vulnerability":"transaction_fee","smart_contract":"from pyteal import *\n\ndef transaction_verification():\n    basic_checks = And(Txn.type_enum() == TxnType.Payment, Txn.sender() != Addr(\"ZOEAMKDD6L3ZE3WGZN7PUNTLQ4D7WMIANNDUCTP3SGIMFPPVWU7NR7PCIM\"), Txn.receiver() == Addr(\"2YINOKV3CN6PLHYXTLECTB5V6YQWP2SXGGDJUY2CDXLVHB3GOHG4WKEVCU\"), Txn.rekey_to() == Global.zero_address(), Txn.close_remainder_to() == Global.zero_address(), Txn.amount() > Int(100), Txn.group_index() != Int(0))\n    other_txn_checks = And(Gtxn[1].type_enum() == TxnType.Payment, Gtxn[1].rekey_to() == Global.zero_address(), Gtxn[1].close_remainder_to() == Global.zero_address(), Gtxn[1].sender() != Addr(\"YFH2ZJ43FNV75M2XYU4SRMKE6CXKVS7EECPOCDCTENW4OITFCPHESN74XI\"), Gtxn[1].group_index() == Int(1))\n    extra_txn_checks = And(Gtxn[2].type_enum() == TxnType.AssetTransfer, Gtxn[2].asset_receiver() == Addr(\"P3YBXEZ6I2XSCQVRD2ECOJ544W4K6B6JYKPE3R2TYHYLQKIH56N6MPE2HA\"), Gtxn[2].asset_amount() == Int(1),  Gtxn[2].fee() <= Int(1500), Gtxn[2].rekey_to() == Global.zero_address())\n    program = And(basic_checks, other_txn_checks, extra_txn_checks)\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(transaction_verification(), mode=Mode.Signature, version=4))\n\n"}
{"vulnerability":"transaction_fee","smart_contract":"from pyteal import *\n\n\ndef advanced_transaction_verification():\n    primary_recipient = Addr(\"UM7JZKBPRQQGAKD3PH2MTWOQRGYDYFS7NZT26V62G6XB5TKCPFG4Q3KY2A\")\n    secondary_recipient = Addr(\"UYVXIX2I32BZKHMI2HZZAAEEYNFTKZXIFMBXTZ7GRO6QTRCP2RUVAZ5SX4\")\n    tertiary_recipient = Addr(\"Y4VITGDJ2GY6SCUDQ4K7KLZOJWU7U6P7M5EZRQNVYWPAKOIJRUTQMBFONA\")\n    max_amount = Int(500000)\n    expiration_time = Int(1650000000)\n\n    group_check = Global.group_size() == Int(4)\n\n    txn1_conditions = And(\n        Gtxn[0].type_enum() == TxnType.Payment,\n        Gtxn[0].receiver() == primary_recipient,\n        Gtxn[0].amount() == max_amount \/ Int(2),\n        Gtxn[0].close_remainder_to() == Global.zero_address(),\n        Gtxn[0].rekey_to() == Global.zero_address(),\n        Gtxn[0].fee() <= Int(1000),\n    )\n\n    txn2_conditions = And(\n        Gtxn[1].type_enum() == TxnType.Payment,\n        Gtxn[1].receiver() == secondary_recipient,\n        Gtxn[1].amount() <= max_amount \/ Int(3),\n        Gtxn[1].close_remainder_to() == Global.zero_address(),\n        Gtxn[1].rekey_to() == Global.zero_address(),\n        Global.latest_timestamp() < expiration_time,\n        Gtxn[1].fee() <= Int(1000),\n    )\n\n    txn3_conditions = And(\n        Gtxn[2].type_enum() == TxnType.AssetTransfer,\n        Gtxn[2].asset_receiver() == tertiary_recipient,\n        Gtxn[2].asset_amount() == Int(1),\n        Gtxn[2].fee() <= Int(1000),\n        Gtxn[2].asset_close_to() == Global.zero_address(),\n        Gtxn[2].rekey_to() == Global.zero_address(),\n    )\n\n    txn4_conditions = And(\n        Gtxn[3].type_enum() == TxnType.Payment,\n        Gtxn[3].receiver() == primary_recipient,\n        Gtxn[3].amount() == max_amount \/ Int(4),\n        Gtxn[3].close_remainder_to() == Global.zero_address(),\n        Gtxn[3].rekey_to() == Global.zero_address(),\n    )\n\n    exclusive_txn_check = Or(txn1_conditions, txn2_conditions, txn3_conditions)\n\n    program_logic = And(group_check, exclusive_txn_check, txn4_conditions)\n\n    return program_logic\n\n\nif __name__ == \"__main__\":\n    print(compileTeal(advanced_transaction_verification(), mode=Mode.Signature, version=5))\n"}
{"vulnerability":"transaction_fee","smart_contract":"from pyteal import *\n\ndef secure_fee_contract():\n    fee_limit = Int(1000)\n\n    txn1 = Seq([\n        Assert(Txn.fee() <= fee_limit),\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.asset_close_to() == Global.zero_address()),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Return(Int(1))\n    ])\n\n    txn2 = Seq([\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.asset_close_to() == Global.zero_address()),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Return(Int(1))\n    ])\n\n    txn3 = Seq([\n        Assert(Txn.fee() <= fee_limit),\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.asset_close_to() == Global.zero_address()),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Return(Int(1))\n    ])\n\n    program = Cond(\n        [Txn.group_index() == Int(0), txn1],\n        [Txn.group_index() == Int(1), txn2],\n        [Txn.group_index() == Int(2), txn3]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(secure_fee_contract(), mode=Mode.Signature, version=5))"}
{"vulnerability":"transaction_fee","smart_contract":"\nfrom pyteal import *\n\ndef approval_program():\n    fee_limit = Int(2000)\n    asset_id = Int(654321)\n    asset_receiver = Addr(\"QZYC3VHRXWYHNFU5OQZCO5OGV6Y5BQ3U6NBCOJPG5CE3KKLJC3QFNKBJW4\")\n    amount = Int(100)\n\n    def check_payment(idx, recv, amt):\n        return And(\n            Gtxn[idx].type_enum() == TxnType.Payment,\n            Gtxn[idx].receiver() == recv,\n            Gtxn[idx].fee() <= fee_limit,\n            Gtxn[idx].close_remainder_to() == Global.zero_address(),\n            Gtxn[idx].rekey_to() == Global.zero_address(),\n        )\n\n    def validate_asset_transfer(idx, aid, recv, amt):\n        return And(\n            Gtxn[idx].type_enum() == TxnType.AssetTransfer,\n            Gtxn[idx].xfer_asset() == aid,\n            Gtxn[idx].asset_receiver() == recv,\n            Gtxn[idx].asset_close_to() == Global.zero_address(),\n            Gtxn[idx].rekey_to() == Global.zero_address(),\n        )\n\n    def check_opt_in(idx, aid):\n        return And(\n            Gtxn[idx].type_enum() == TxnType.AssetTransfer,\n            Gtxn[idx].xfer_asset() == aid,\n            Gtxn[idx].asset_receiver() == Gtxn[idx].sender(),\n            Gtxn[idx].asset_amount() == Int(0),\n            Gtxn[idx].fee() <= fee_limit,\n            Gtxn[idx].asset_close_to()== Global.zero_address(),\n            Gtxn[idx].rekey_to() == Global.zero_address(),\n        )\n\n    txn_2 = validate_asset_transfer(2, asset_id, asset_receiver, amount)\n    txn_3 = check_opt_in(3, asset_id)\n\n    return And(\n        Global.group_size() == Int(4),\n        check_payment(0, Addr(\"EAF7N2GQPDCON7I5QVJXMFSSTV4J2OY66TOAYPHNGS7W76PCSUHU2RIMSY\"), 2000000),\n        check_payment(1, Addr(\"JLFZ7MYYQOZQQIKISR7X7H4AF6J6TDFPJXH4YCNDOHKIFOODABYX7PEYXM\"), 1000000),\n        txn_2,\n        txn_3\n    )\n\ndef clear_program():\n    return Approve()\n\nif __name__ == \"__main__\":\n    print(compileTeal(approval_program(), mode=Mode.Signature, version=5))"}
{"vulnerability":"transaction_fee","smart_contract":"from pyteal import *\n\ndef diverse_fee_contract():\n    fee_limit = Int(1000)\n\n    txn1 = Seq([\n        Assert(Txn.fee() <= fee_limit),\n        Assert(Txn.close_remainder_to() == Global.zero_address()),\n        Assert(Txn.asset_close_to() == Global.zero_address()),\n        Assert(Txn.rekey_to() == Global.zero_address()),\n        Return(Int(1))\n    ])\n\n    txn2 = Seq([\n        Assert(Or(\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.asset_close_to() == Global.zero_address(),\n            Txn.rekey_to() == Global.zero_address()\n        )),\n        Return(Int(1))\n    ])\n\n    txn3 = Seq([\n        Assert(And(\n            Txn.fee() <= fee_limit,\n            Txn.close_remainder_to() == Global.zero_address(),\n            Txn.asset_close_to() == Global.zero_address(),\n            Txn.rekey_to() == Global.zero_address()\n        )),\n        Return(Int(1))\n    ])\n\n    program = Cond(\n        [Txn.group_index() == Int(0), txn1],\n        [Txn.group_index() == Int(1), txn2],\n        [Txn.group_index() == Int(2), txn3]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(diverse_fee_contract(), mode=Mode.Signature, version=5))"}
{"vulnerability":"Unchecked_Asset_Receiver","smart_contract":"from pyteal import *\n\ndef approval_program():\n    creator = App.globalGet(Bytes(\"Creator\"))\n\n    handle_creation = Seq([\n        App.globalPut(Bytes(\"Creator\"), Txn.sender()),\n        Return(Int(1))\n    ])\n\n    handle_optin = Return(Int(1))\n\n    handle_closeout = Return(Int(1))\n\n    handle_updateapp = Seq([\n        Assert(Txn.sender() == creator), \n        Return(Int(1))\n    ])\n\n    handle_deleteapp = Seq([\n        Assert(Txn.sender() == creator), \n        Return(Int(1))\n    ])\n\n    handle_noop = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        Assert(Txn.application_args[0] == Bytes(\"transfer\")),\n        Assert(Txn.assets.length() == Int(1)),\n        Assert(Txn.asset_amount() > Int(0)),\n        InnerTxnBuilder.Begin(),\n        InnerTxnBuilder.SetFields({\n            TxnField.type_enum: TxnType.AssetTransfer,\n            TxnField.asset_receiver: Txn.accounts[1],\n            TxnField.asset_amount: Txn.asset_amount(),\n            TxnField.xfer_asset: Txn.assets[0]\n        }),\n        InnerTxnBuilder.Submit(),\n        Return(Int(1))\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), handle_creation],\n        [Txn.on_completion() == OnComplete.OptIn, handle_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, handle_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, handle_updateapp],\n        [Txn.on_completion() == OnComplete.DeleteApplication, handle_deleteapp],\n        [Txn.on_completion() == OnComplete.NoOp, handle_noop]\n    )\n\n    return program\n\ndef clear_state_program():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(approval_program(), mode=Mode.Application, version=2))\n    print(compileTeal(clear_state_program(), mode=Mode.Application, version=2))"}
{"vulnerability":"Unchecked_Asset_Receiver","smart_contract":"from pyteal import *\n\ndef contract():\n    min_transfer = Int(100)\n    receiver_key = Bytes(\"receiver\")\n    creator_key = Bytes(\"Creator\")\n\n    handle_creation = Seq([\n        App.globalPut(creator_key, Txn.sender()),\n        Return(Int(1))\n    ])\n\n    handle_optin = Return(Int(1))\n\n    handle_closeout = Return(Int(1))\n\n    handle_updateapp = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    handle_deleteapp = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    handle_transfer = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(1),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[1].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[1].assets[0],\n                Gtxn[0].asset_amount() >= min_transfer\n            )\n        ),\n        InnerTxnBuilder.Begin(),\n        InnerTxnBuilder.SetFields({\n            TxnField.type_enum: TxnType.AssetTransfer,\n            TxnField.asset_receiver: Txn.accounts[1],\n            TxnField.asset_amount: Gtxn[0].asset_amount(),\n            TxnField.xfer_asset: Gtxn[0].xfer_asset()\n        }),\n        InnerTxnBuilder.Submit(),\n        App.globalPut(Concat(receiver_key, Txn.accounts[1]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    handle_check_transfers = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        Return(App.globalGet(Concat(receiver_key, Txn.accounts[1])) > Int(0))\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), handle_creation],\n        [Txn.on_completion() == OnComplete.OptIn, handle_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, handle_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, handle_updateapp],\n        [Txn.on_completion() == OnComplete.DeleteApplication, handle_deleteapp],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"transfer\"), handle_transfer],\n            [Txn.application_args[0] == Bytes(\"check_transfer\"), handle_check_transfers]\n        )]\n    )\n\n    return program\n\ndef clear_state_program():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(contract(), mode=Mode.Application, version=5))"}
{"vulnerability":"Unchecked_Asset_Receiver","smart_contract":"from pyteal import *\n\ndef asset_management_contract():\n    min_amount = Int(100)\n    key_prefix = Bytes(\"asset_\")\n    creator_key = Bytes(\"Creator\")\n\n    on_creation = Seq([\n        App.globalPut(creator_key, Txn.sender()),\n        Return(Int(1))\n    ])\n\n    on_optin = Return(Int(1))\n\n    on_closeout = Return(Int(1))\n\n    on_update = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    on_delete = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    on_transfer = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(1),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[1].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[1].assets[0],\n                Gtxn[0].asset_amount() >= min_amount\n            )\n        ),\n        App.globalPut(Concat(key_prefix, Txn.accounts[1]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    on_check = Seq([\n        Assert(Txn.application_args.length() == Int(1)),\n        Return(App.globalGet(Concat(key_prefix, Txn.accounts[1])) > Int(0))\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), on_creation],\n        [Txn.on_completion() == OnComplete.OptIn, on_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, on_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, on_update],\n        [Txn.on_completion() == OnComplete.DeleteApplication, on_delete],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"transfer\"), on_transfer],\n            [Txn.application_args[0] == Bytes(\"check\"), on_check]\n        )]\n    )\n\n    return program\n\ndef clear_state():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(asset_management_contract(), mode=Mode.Application, version=5))\n"}
{"vulnerability":"Unchecked_Asset_Receiver","smart_contract":"from pyteal import *\n\ndef asset_exchange_game():\n    min_amount = Int(50)\n    asset_prefix = Bytes(\"asset_\")\n    owner_key = Bytes(\"Owner\")\n\n    on_creation = Seq([\n        App.globalPut(owner_key, Txn.sender()),\n        Return(Int(1))\n    ])\n\n    on_optin = Return(Int(1))\n\n    on_closeout = Return(Int(1))\n\n    on_update = Seq([\n        Assert(Txn.sender() == App.globalGet(owner_key)),\n        Return(Int(1))\n    ])\n\n    on_delete = Seq([\n        Assert(Txn.sender() == App.globalGet(owner_key)),\n        Return(Int(1))\n    ])\n\n    on_exchange_1 = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(1),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[1].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[1].assets[0],\n                Gtxn[0].asset_amount() >= min_amount\n            )\n        ),\n        App.globalPut(Concat(asset_prefix, Txn.accounts[1]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    on_exchange_2 = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(2),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[2].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[2].assets[0],\n                Gtxn[0].asset_amount() >= min_amount\n            )\n        ),\n        App.globalPut(Concat(asset_prefix, Txn.accounts[2]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    on_exchange_3 = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(3),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[3].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[3].assets[0],\n                Gtxn[0].asset_amount() >= min_amount\n            )\n        ),\n        App.globalPut(Concat(asset_prefix, Txn.accounts[3]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), on_creation],\n        [Txn.on_completion() == OnComplete.OptIn, on_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, on_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, on_update],\n        [Txn.on_completion() == OnComplete.DeleteApplication, on_delete],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"exchange_1\"), on_exchange_1],\n            [Txn.application_args[0] == Bytes(\"exchange_2\"), on_exchange_2],\n            [Txn.application_args[0] == Bytes(\"exchange_3\"), on_exchange_3]\n        )]\n    )\n\n    return program\n\ndef clear_state():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(asset_exchange_game(), mode=Mode.Application, version=5))"}
{"vulnerability":"Unchecked_Asset_Receiver","smart_contract":"from pyteal import *\n\ndef timed_asset_exchange():\n    min_amount = Int(50)\n    asset_prefix = Bytes(\"asset_\")\n    owner_key = Bytes(\"Owner\")\n    start_time_key = Bytes(\"StartTime\")\n    delay = Int(1000)  \n\n    on_creation = Seq([\n        App.globalPut(owner_key, Txn.sender()),\n        App.globalPut(start_time_key, Global.round()),\n        Return(Int(1))\n    ])\n\n    on_optin = Return(Int(1))\n\n    on_closeout = Return(Int(1))\n\n    on_update = Seq([\n        Assert(Txn.sender() == App.globalGet(owner_key)),\n        Return(Int(1))\n    ])\n\n    on_delete = Seq([\n        Assert(Txn.sender() == App.globalGet(owner_key)),\n        Return(Int(1))\n    ])\n\n    on_exchange_1 = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(1),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[1].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[1].assets[0],\n                Gtxn[0].asset_amount() >= min_amount,\n                Global.round() >= App.globalGet(start_time_key) + delay\n            )\n        ),\n        App.globalPut(Concat(asset_prefix, Txn.accounts[1]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    on_exchange_2 = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(2),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[2].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[2].assets[0],\n                Gtxn[0].asset_amount() >= min_amount,\n                Global.round() >= App.globalGet(start_time_key) + delay\n            )\n        ),\n        App.globalPut(Concat(asset_prefix, Txn.accounts[2]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    on_exchange_3 = Seq([\n        Assert(\n            And(\n                Txn.group_index() == Int(3),\n                Gtxn[0].type_enum() == TxnType.AssetTransfer,\n                Gtxn[3].type_enum() == TxnType.ApplicationCall,\n                Gtxn[0].xfer_asset() == Gtxn[3].assets[0],\n                Gtxn[0].asset_amount() >= min_amount,\n                Global.round() >= App.globalGet(start_time_key) + delay\n            )\n        ),\n        App.globalPut(Concat(asset_prefix, Txn.accounts[3]), Gtxn[0].asset_amount()),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), on_creation],\n        [Txn.on_completion() == OnComplete.OptIn, on_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, on_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, on_update],\n        [Txn.on_completion() == OnComplete.DeleteApplication, on_delete],\n        [Txn.on_completion() == OnComplete.NoOp, Cond(\n            [Txn.application_args[0] == Bytes(\"exchange_1\"), on_exchange_1],\n            [Txn.application_args[0] == Bytes(\"exchange_2\"), on_exchange_2],\n            [Txn.application_args[0] == Bytes(\"exchange_3\"), on_exchange_3]\n        )]\n    )\n\n    return program\n\ndef clear_state():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(timed_asset_exchange(), mode=Mode.Application, version=5))"}
{"vulnerability":"Unchecked_Payment_Receiver","smart_contract":"from pyteal import *\n\ndef payment_vulnerability_contract():\n    creator_key = Bytes(\"Creator\")\n\n    handle_creation = Seq([\n        App.globalPut(creator_key, Txn.sender()),\n        Return(Int(1))\n    ])\n\n    handle_optin = Return(Int(1))\n\n    handle_closeout = Return(Int(1))\n\n    handle_updateapp = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    handle_deleteapp = Seq([\n        Assert(Txn.sender() == App.globalGet(creator_key)),\n        Return(Int(1))\n    ])\n\n    handle_payment = Seq([\n        Assert(Global.group_size() >= Int(2)),\n        Assert(Txn.type_enum() == TxnType.Payment),\n        Assert(Txn.amount() > Int(0)),\n        App.globalPut(Bytes(\"Receiver\"), Txn.accounts[1]),\n        App.globalPut(Bytes(\"Amount\"), Txn.amount()),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), handle_creation],\n        [Txn.on_completion() == OnComplete.OptIn, handle_optin],\n        [Txn.on_completion() == OnComplete.CloseOut, handle_closeout],\n        [Txn.on_completion() == OnComplete.UpdateApplication, handle_updateapp],\n        [Txn.on_completion() == OnComplete.DeleteApplication, handle_deleteapp],\n        [Txn.on_completion() == OnComplete.NoOp, handle_payment]\n    )\n\n    return program\n\ndef clear_state_program():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(payment_vulnerability_contract(), mode=Mode.Application, version=5))"}
{"vulnerability":"Unchecked_Payment_Receiver","smart_contract":"from pyteal import *\n\ndef pension_payment_contract():\n    creator_key = Bytes(\"Creator\")\n    pension_fund = Bytes(\"Fund\")\n\n    handle_creation = Seq([\n        App.globalPut(creator_key, Txn.sender()),\n        App.globalPut(pension_fund, Int(0)),\n        Return(Int(1))\n    ])\n\n    handle_fund = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[0].type_enum() == TxnType.Payment),\n        App.globalPut(pension_fund, App.globalGet(pension_fund) + Gtxn[0].amount()),\n        Approve()\n    ])\n\n    handle_withdraw = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[1].type_enum() == TxnType.Payment),\n        Assert(App.globalGet(pension_fund) >= Gtxn[1].amount()),\n        App.globalPut(pension_fund, App.globalGet(pension_fund) - Gtxn[1].amount()),\n        InnerTxnBuilder.Begin(),\n        InnerTxnBuilder.SetField(TxnField.type_enum, TxnType.Payment),\n        InnerTxnBuilder.SetField(TxnField.receiver, Gtxn[1].accounts[1]),\n        InnerTxnBuilder.SetField(TxnField.amount, Gtxn[1].amount()),\n        InnerTxnBuilder.Submit(),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), handle_creation],\n        [Txn.on_completion() == OnComplete.NoOp, handle_fund],\n        [Txn.on_completion() == OnComplete.ClearState, handle_withdraw]\n    )\n\n    return program\n\nif __name__ == \"__main__\":\n    print(compileTeal(pension_payment_contract(), mode=Mode.Application, version=5))"}
{"vulnerability":"Unchecked_Payment_Receiver","smart_contract":"from pyteal import *\n\ndef pension_system():\n    company_key = Bytes(\"Company\")\n    fund_key = Bytes(\"Fund\")\n    pension_key = Bytes(\"Pension\")\n    \n    init = Seq([\n        App.globalPut(company_key, Txn.sender()),\n        App.globalPut(fund_key, Int(0)),\n        Return(Int(1))\n    ])\n    \n    contribute = Seq([\n        Assert(Txn.sender() == App.globalGet(company_key)),\n        App.globalPut(fund_key, App.globalGet(fund_key) + Txn.amount()),\n        Approve()\n    ])\n    \n    set_pension = Seq([\n        Assert(Txn.sender() == App.globalGet(company_key)),\n        App.globalPut(pension_key, Btoi(Txn.application_args[1])),\n        Approve()\n    ])\n\n    handledelete = Seq([\n        Assert(Txn.sender() == App.globalGet(company_key)),\n        Approve()\n    ])\n    \n    withdraw = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[0].sender() == App.globalGet(company_key)),\n        Assert(App.globalGet(fund_key) >= App.globalGet(pension_key)),\n        App.globalPut(fund_key, App.globalGet(fund_key) - App.globalGet(pension_key)),\n        InnerTxnBuilder.Begin(),\n        InnerTxnBuilder.SetField(TxnField.type_enum, TxnType.Payment),\n        InnerTxnBuilder.SetField(TxnField.amount, App.globalGet(pension_key)),\n        InnerTxnBuilder.SetField(TxnField.receiver, Gtxn[1].receiver()),\n        InnerTxnBuilder.Submit(),\n        Approve()\n    ])\n    \n    program = Cond(\n        [Txn.application_id() == Int(0), init],\n        [Txn.on_completion() == OnComplete.NoOp, contribute],\n        [Txn.on_completion() == OnComplete.UpdateApplication, set_pension],\n        [Txn.on_completion() == OnComplete.DeleteApplication, handledelete],\n        [Txn.on_completion() == OnComplete.CloseOut, Return(Int(1))],\n        [Txn.on_completion() == OnComplete.OptIn, withdraw]\n    )\n    \n    return program\n\ndef clear_state():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(pension_system(), mode=Mode.Application, version=5))\n\n"}
{"vulnerability":"Unchecked_Payment_Receiver","smart_contract":"from pyteal import *\n\ndef secure_fund():\n    admin_key = Bytes(\"Admin\")\n    balance_key = Bytes(\"Balance\")\n    recipient_key = Bytes(\"Recipient\")\n\n    initialize = Seq([\n        App.globalPut(admin_key, Txn.sender()),\n        App.globalPut(balance_key, Int(0)),\n        Return(Int(1))\n    ])\n\n    deposit = Seq([\n        Assert(Txn.sender() == App.globalGet(admin_key)),\n        App.globalPut(balance_key, App.globalGet(balance_key) + Txn.amount()),\n        Approve()\n    ])\n\n    set_recipient = Seq([\n        Assert(Txn.sender() == App.globalGet(admin_key)),\n        App.globalPut(recipient_key, Txn.application_args[1]),\n        Approve()\n    ])\n\n    pagamento = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[0].sender() == App.globalGet(admin_key)),\n        Assert(App.globalGet(balance_key) >= Gtxn[1].amount()),\n        App.globalPut(balance_key, App.globalGet(balance_key) - Gtxn[1].amount()),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), initialize],\n        [Txn.on_completion() == OnComplete.NoOp, deposit],\n        [Txn.on_completion() == OnComplete.UpdateApplication, set_recipient],\n        [Txn.on_completion() == OnComplete.OptIn, pagamento]\n    )\n\n    return program\n\ndef clear_state():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(secure_fund(), mode=Mode.Application, version=5))"}
{"vulnerability":"Unchecked_Payment_Receiver","smart_contract":"from pyteal import *\n\ndef fund_manager():\n    owner_key = Bytes(\"Owner\")\n    total_funds_key = Bytes(\"TotalFunds\")\n\n    setup = Seq([\n        App.globalPut(owner_key, Txn.sender()),\n        App.globalPut(total_funds_key, Int(0)),\n        Return(Int(1))\n    ])\n\n    add_funds = Seq([\n        Assert(Txn.sender() == App.globalGet(owner_key)),\n        App.globalPut(total_funds_key, App.globalGet(total_funds_key) + Txn.amount()),\n        Approve()\n    ])\n\n    distribute_funds = Seq([\n        Assert(Global.group_size() == Int(2)),\n        Assert(Gtxn[0].sender() == App.globalGet(owner_key)),\n        Assert(Gtxn[0].type_enum() == TxnType.Payment),\n        Assert(App.globalGet(total_funds_key) >= Gtxn[1].amount()),\n        App.globalPut(total_funds_key, App.globalGet(total_funds_key) - Gtxn[1].amount()),\n        Approve()\n    ])\n\n    program = Cond(\n        [Txn.application_id() == Int(0), setup],\n        [Txn.on_completion() == OnComplete.NoOp, add_funds],\n        [Txn.on_completion() == OnComplete.OptIn, distribute_funds]\n    )\n\n    return program\n\ndef clear_state():\n    return Return(Int(1))\n\nif __name__ == \"__main__\":\n    print(compileTeal(fund_manager(), mode=Mode.Application, version=5))"}
